C: Choice of Programming Language 

For this translation task, Python was chosen as the target language. While other object-oriented languages like Java or C++ were considered, Python offered the best balance of features for the requirements of this assignment. The reason for this selection is that Python's clear, readable syntax makes the translation from a procedural language like Fortran more straightforward. Furthermore, its extensive support for scientific computing and data analysis makes it a practical choice for future enhancements to a weather-focused application, aligning well with the skills required for modern software development in scientific domains. 

Java was considered but was not selected due to the higher amount of boilerplate code required for a simple console application. C++ was also an option, but its complexity regarding manual memory management was deemed unnecessary for a program of this scale, where Python's performance is more than sufficient. 

D: Method of Translation 

The translation from Fortran to Python was approached with a manual, logic-driven methodology. The process started with a static analysis of the Fortran source files to understand the program's structure, data types, and control flow. Key constructs, such as the Fortran module and type, were conceptually mapped to their object-oriented equivalents in Python, namely a class with an __init__ constructor. The procedural subroutines and functions were then re-implemented as methods within this class. 

As permitted, an AI model (Gemini) was used as an assistive tool to bridge knowledge gaps between the two languages. Its role was primarily as a language consultant. For instance, after manually outlining the logic for a Fortran DO loop, the AI was prompted to suggest the most idiomatic Python equivalent. It was also utilized to help generate the initial structure for the test plan and to verify that APA formatting was correctly applied. The core logical translation and the final validation of the code, however, were performed manually to ensure correctness and fulfill the assignment's objectives. 

E: Test Plan 

1.0 Test Objective 

To verify and validate that the translated Python application is functionally identical to the original Fortran application by ensuring that its console output exactly matches the "golden master" output produced by the original program given a fixed set of inputs. 

2.0 Scope 

The scope of this test plan covers all console output generated by the application, including the "Today's Forecast" section and the full "Weekly Forecast" summary. 

3.0 Test Cases 

Test Case ID 

Description 

Test Steps 

Expected Result 

TC-01 

Verify "Today's Forecast" Output 

1. Compile and run the original weather_program executable. <br> 2. Run the weather_app.py script.  
3. Compare the "SUNDAY FORECAST" section from both outputs. 

The "High" and "Low" values must be identical to the Fortran output. 

TC-02 

Verify Weekly Average Calculations 

1. Compile and run the original weather_program. <br> 2. Run weather_app.py.  
3. Compare the "Average Hi" and "Average Low" values. 

The calculated averages must match the Fortran output to at least 7 decimal places. 

TC-03 

Verify Weekly Extreme Calculations 

1. Compile and run the original weather_program. <br> 2. Run weather_app.py.  
3. Compare the "Highest Weekly Temperature" and "Lowest Weekly Temperature" values. 

The highest and lowest temperature values must be identical to the Fortran output. 

TC-04 

Verify Full Weekly Forecast Display 

1. Compile and run the original weather_program. <br> 2. Run weather_app.py.  
3. Compare the day-by-day forecast list. 

The sequence of days and their corresponding "High" and "Low" values must be identical in content and order to the Fortran output. 

F: Method of Testing and Validation 

For this project, a method of comparative output analysis was chosen to validate the translated code. The reason for this choice is its directness and effectiveness for a non-interactive console application like this one. The process involved treating the console output of the original, trusted Fortran program as a "golden master" record. The newly created Python application was then executed, and its output was compared line-by-line against the golden master to ensure an exact match. 

This validation was performed manually through a side-by-side visual inspection. While automated testing frameworks like Python's unittest were considered, they were deemed unnecessary for this specific validation step, as the primary goal was to prove that the final, integrated output of the entire program was identical. The comparative analysis method directly confirms that the full chain of logic—from data initialization to final display—is functionally equivalent in both versions, satisfying the core requirement of the assessment. 

G: References 

Sebesta, R. W. (2019). Concepts of programming languages (12th ed.). Pearson. 
